{"version":3,"sources":["assembly/index.ts"],"names":[],"mappings":"uFAkBE,AAAY,SAb6B,AAAxB,AASF,AAAa,MAAb,EAAS,IATG,cA+B3B,EAAoB,EAAQ,OAEP,AADnB,AAAsB,AAAmB,EAAnB,iBAIjB,AAAY,MAAjB,EAAoB,EAAI,KAEM,AAD5B,AAAuB,AAAW,EAAS,SAE3C,AACE,AAAQ,AAAkB,EAAlB,iBACA,AAAkB,EAAlB,qBACA,AAAqB,EAArB,mBAER,AAAoB,IACf,AAAe,MAApB,EAAuB,EAAO,KAEN,AADtB,AAAiB,AAAW,EAAkB,SAE9C,AAAI,AAhD6B,AAAxB,AAgDG,AAAkB,EAAlB,MAhDO,MAgD2B,KAE5C,AAAI,AADJ,OACsB,KACpB,AAAgB,IAChB,IAP2B,WAWjC,AAAI,EAAgB,KACT,AAAqB,EAArB,SAAuC,KApDxD,AAAW,AAqDM,AAAsB,EAAtB,MArDI,GAAgB,KAsD7B,AAAoB,EAAoB,OAvBnB,WALK","sourceRoot":"assemblyscript:///","sourceContents":["@external(\"console\", \"logger\")\ndeclare function logger(offset: usize): void\n\n@inline\nfunction loadBit(offset: u32): u32 {\n  return load<u32>(offset << alignof<u32>());\n}\n\n@inline\nfunction storeBit(offset: u32, value: u32): void {\n  store<u32>(offset << alignof<u32>(), value);\n}\n\nfunction loadCopper(offset: u32, pos: u8): u32 {\n  return loadBit(offset * 8 + pos);\n}\n\nexport function init(): void {\n  memory.grow(800);\n}\n\nexport function tick(): void {\n  const size = 605129;\n  const coppersSize = size * 8;\n  const headsArrayOffset = coppersSize + size * 1;\n  const tailsArrayOffset = coppersSize + size * 3;\n  const headsGridOffset = coppersSize + size * 2;\n  const tailsGridOffset = coppersSize + size * 4;\n\n  const newHeadsArrayOffset = coppersSize + size * 5;\n  const newTailsArrayOffset = coppersSize + size * 7;\n  const newHeadsGridOffset = coppersSize + size * 6;\n  const newTailsGridOffset = coppersSize + size * 8;\n\n  /**/\n  let newHeadArrayIndex = 0;\n  for (let index = 0; index < size; index++) {\n    let headKey = loadBit(headsArrayOffset + index);\n    if (headKey === 0) {\n      break;\n    }\n    for (let i: u8 = 0; i < 8; i++) {\n      let copperStateIndex = loadCopper(headKey, i);\n      if (copperStateIndex === 0) break;\n      if (\n        loadBit(tailsGridOffset + copperStateIndex) === 0 &&\n        loadBit(headsGridOffset + copperStateIndex) === 0 &&\n        loadBit(newHeadsGridOffset + copperStateIndex) === 0\n      ) {\n        let headNeighbors = 0;\n        for (let ind2: u8 = 0; ind2 < 8; ind2++) {\n          let stateIndex = loadCopper(copperStateIndex, ind2);\n          if (stateIndex === 0) break;\n          if (loadBit(headsGridOffset + stateIndex) === 1) {\n            headNeighbors++;\n            if (headNeighbors === 3) {\n              headNeighbors = 0;\n              break;\n            }\n          }\n        }\n        if (headNeighbors > 0) {\n          storeBit(newHeadsGridOffset + copperStateIndex, 1);\n          storeBit(newHeadsArrayOffset + newHeadArrayIndex, copperStateIndex);\n          newHeadArrayIndex = newHeadArrayIndex + 1;\n        }\n      }\n    }\n  }\n\n/*\n  for (let i = headsArrayOffset, j = 0, l = headsGridOffset + size; i < l; i++, j++) {\n    storeBit(newTailsArrayOffset + j, loadBit(i));\n  }\n\n  for (let i = newHeadsArrayOffset, j = 0, l = newHeadsArrayOffset + size * 4 + size * 4; i < l; i++, j++) {\n    storeBit(headsArrayOffset + j, loadBit(i));\n  }\n*/\n\n  /*\n    this.mem32.copyWithin(newTailsArrayOffset, headsArrayOffset, headsGridOffset + size);\n    this.mem32.copyWithin(headsArrayOffset, newHeadsArrayOffset, newHeadsArrayOffset + size * 4 + size * 4);\n  */\n\n\n}\n\n"]}
{"version":3,"sources":["assembly/index.ts"],"names":[],"mappings":"6FAqBE,AAAY,YAiBZ,AAAwB,IACxB,AAAgB,EAAQ,kBACxB,EAAK,AAAiB,MAAG,EAAS,MAAe,EAC/C,AAAc,EAAQ,KAAmB,gBACzC,AAAsB,EAAQ,EAAU,gBACxC,EAAK,AAAY,MAAG,EAAI,MAAiB,EACvC,AAAuB,iCACvB,AACE,EAAQ,KAAkB,cAAsB,OAChD,EAAQ,KAAkB,cAAsB,cAChD,EAAQ,KAAqB,cAAsB,YAEnD,AAAoB,IACpB,AAAuB,EAAQ,EAAmB,gBAClD,EAAK,AAAe,MAAG,EAAO,MAAqB,EACjD,AAAiB,EApCmB,EAA7B,EAAS,GAAa,OAAM,iBAqCnC,AAAI,EAAQ,KAAkB,KA/CG,AAAxB,EAAU,OA+C2B,KAC5C,OACA,AAAI,EAAkB,KACpB,AAAgB,IAChB,KANqC,aAU3C,AAAI,EAAgB,KACT,KAAqB,KAAkB,cACvC,KAAsB,GAAoB,eACnD,AAAoB,EAAoB,QAtBV,cAHE,aA8B/B,OA1DT,AAAW,EAAU,GAAgB","sourceRoot":"assemblyscript:///","sourceContents":["@external('console', 'logger')\r\ndeclare function logger(offset: usize): void\r\n\r\nconst copperSize: u32 = 9;\r\n\r\n@inline\r\nfunction loadBit(offset: u32): u32 {\r\n  return load<u32>(offset << alignof<u32>());\r\n}\r\n\r\n@inline\r\nfunction storeBit(offset: u32, value: u32): void {\r\n  store<u32>(offset << alignof<u32>(), value);\r\n}\r\n\r\n@inline\r\nfunction loadCopper(offset: u32, pos: u8): u32 {\r\n  return loadBit(offset * copperSize + pos + 1);\r\n}\r\n\r\nexport function init(): void {\r\n  memory.grow(800);\r\n}\r\n\r\nexport function tick(): void {\r\n  const size = 605129;\r\n  const coppersSize = size * copperSize;\r\n  const headsArrayOffset = coppersSize + size * 1;\r\n  const headsGridOffset = coppersSize + size * 2;\r\n  const tailsArrayOffset = coppersSize + size * 3;\r\n  const tailsGridOffset = coppersSize + size * 4;\r\n\r\n  const newHeadsArrayOffset = coppersSize + size * 5;\r\n  const newHeadsGridOffset = coppersSize + size * 6;\r\n  const newTailsArrayOffset = coppersSize + size * 7;\r\n  const newTailsGridOffset = coppersSize + size * 8;\r\n\r\n  /**/\r\n  let newHeadArrayIndex = 0;\r\n  let hLen: u32 = loadBit(headsArrayOffset);\r\n  for (let index: u32 = 1; index <= hLen; index++) {\r\n    let headKey = loadBit(headsArrayOffset + index);\r\n    let hCopperLen: u32 = loadBit(headKey * copperSize);\r\n    for (let i: u8 = 0; i < hCopperLen; i++) {\r\n      let copperStateIndex = loadCopper(headKey, i);\r\n      if (\r\n        loadBit(tailsGridOffset + copperStateIndex) === 0 &&\r\n        loadBit(headsGridOffset + copperStateIndex) === 0 &&\r\n        loadBit(newHeadsGridOffset + copperStateIndex) === 0\r\n      ) {\r\n        let headNeighbors = 0;\r\n        let hnCopperLen: u32 = loadBit(copperStateIndex * copperSize);\r\n        for (let ind2: u8 = 0; ind2 < hnCopperLen; ind2++) {\r\n          let stateIndex = loadCopper(copperStateIndex, ind2);\r\n          if (loadBit(headsGridOffset + stateIndex) === 1) {\r\n            headNeighbors++;\r\n            if (headNeighbors === 3) {\r\n              headNeighbors = 0;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (headNeighbors > 0) {\r\n          storeBit(newHeadsGridOffset + copperStateIndex, 1);\r\n          storeBit(newHeadsArrayOffset + newHeadArrayIndex + 1, copperStateIndex);\r\n          newHeadArrayIndex = newHeadArrayIndex + 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  storeBit(newHeadsArrayOffset, newHeadArrayIndex);\r\n}\r\n"]}